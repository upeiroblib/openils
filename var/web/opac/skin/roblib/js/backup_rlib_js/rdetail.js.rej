***************
*** 1,12 ****
  /* */
  
- 
  detachAllEvt('common', 'run');
  attachEvt("common", "run", rdetailDraw);
  attachEvt("rdetail", "recordDrawn", rdetailBuildStatusColumns);
  attachEvt("rdetail", "recordDrawn", rdetailBuildInfoRows);
  attachEvt("rdetail", "recordDrawn", rdetailGetPageIds);
  
  var record = null;
  var cp_statuses = null;
  var recordsCache = [];
--- 1,21 ----
  /* */
  
  detachAllEvt('common', 'run');
  attachEvt("common", "run", rdetailDraw);
  attachEvt("rdetail", "recordDrawn", rdetailBuildStatusColumns);
  attachEvt("rdetail", "recordDrawn", rdetailBuildInfoRows);
  attachEvt("rdetail", "recordDrawn", rdetailGetPageIds);
  
+ /* Per-skin configuration settings */
+ var rdetailLocalOnly = true;
+ var rdetailShowLocal = true;
+ var rdetailShowCopyLocation = true;
+ var rdetailGoogleBookPreview = true;
+ var rdetailDisplaySerialHoldings = true;
+ var rdetailEnableRefWorks = false;
+ var rdetailRefWorksHost = 'http://www.refworks.com';
+ 
+ /* vars vars vars */
  var record = null;
  var cp_statuses = null;
  var recordsCache = [];
***************
*** 17,40 ****
  var numStatuses = null;
  var defaultCN;
  var callnumberCache = {};
- var rdetailLocalOnly = true;
- var globalCNCache	= {};
  var localTOC;
  var cachedRecords;
  
- var rdetailShowLocal = true;
- 
- 
- 
  var nextContainerIndex;
  
- function rdetailReload() {
- 	var args = {};
- 	args[PARAM_LOCATION] = getNewSearchLocation();
- 	args[PARAM_DEPTH] = depthSelGetDepth();
- 	goTo(buildOPACLink(args));
- }
- 
  var nextRecord;
  var prevRecord;
  
--- 26,39 ----
  var numStatuses = null;
  var defaultCN;
  var callnumberCache = {};
+ var globalCNCache = {};
  var localTOC;
  var cachedRecords;
+ var _statusPositions = {};
+ var opac_strings;
  
  var nextContainerIndex;
  
  var nextRecord;
  var prevRecord;
  
***************
*** 43,52 ****
  var rdetailStart = null;
  var rdetailEnd = null;
  
  
  
  /* looks to see if we have a next and/or previous record in the
- record cache, if so, set up the nav links */
  function rdetailSetPaging(ids) {
  
  	cachedRecords = {};
--- 42,64 ----
  var rdetailStart = null;
  var rdetailEnd = null;
  
+ /* serials are currently the only use of Dojo strings in the OPAC */
+ if (rdetailDisplaySerialHoldings) {
+ 	dojo.require("dijit.Menu");
+ 	dojo.require("dijit.form.Button");
+ 	dojo.requireLocalization("openils.opac", "opac");
+ 	opac_strings = dojo.i18n.getLocalization("openils.opac", "opac");
+ }
  
+ function rdetailReload() {
+ 	var args = {};
+ 	args[PARAM_LOCATION] = getNewSearchLocation();
+ 	args[PARAM_DEPTH] = depthSelGetDepth();
+ 	goTo(buildOPACLink(args));
+ }
  
  /* looks to see if we have a next and/or previous record in the
+    record cache, if so, set up the nav links */
  function rdetailSetPaging(ids) {
  
  	cachedRecords = {};
***************
*** 115,120 ****
  	req.callback(_rdetailDraw);
  	req.send();
  
  	detachAllEvt("result", "idsReceived");
  	G.evt.result.hitCountReceived = [];
  	G.evt.result.recordReceived = [];
--- 127,149 ----
  	req.callback(_rdetailDraw);
  	req.send();
  
+ 	if (rdetailDisplaySerialHoldings) {
+ 		var req = new Request(FETCH_MFHD_SUMMARY, getRid());
+ 		req.callback(_holdingsDraw);
+ 		req.send();
+ 		if (isXUL()) {
+ 			var here = findOrgUnit(getLocation());
+ 			dojo.place("<div id='mfhd_ad_menu></div>", "rdetail_details_table", "after");
+ 			var mfhd_add = new dijit.Menu({style:"float: right;"});
+ 			new dijit.MenuItem({onClick:function(){
+ 				var req = new Request(CREATE_MFHD_RECORD, G.user.session, 1, here.id(), getRid());
+ 				var res = req.send();
+ 				alert(dojo.string.substitute(opac_strings.CREATED_MFHD_RECORD, [here.name()]));
+ 			}, label:opac_strings.CREATE_MFHD}).placeAt(mfhd_add);
+ 			mfhd_add.placeAt(mfhd_ad_menu);
+ 		}
+ 	}
+ 
  	detachAllEvt("result", "idsReceived");
  	G.evt.result.hitCountReceived = [];
  	G.evt.result.recordReceived = [];
***************
*** 136,144 ****
  	addCSSClass(span,'unapi-id');
  
  	span.setAttribute(
- 		'title', 'tag:' + cgi.server_name + ',' +
- 		d.getFullYear() + ':' + type + '/' + id
- 	);
  }
  
  function rdetailViewMarc(r,id) {
--- 165,173 ----
  	addCSSClass(span,'unapi-id');
  
  	span.setAttribute(
+ 			'title', 'tag:' + cgi.server_name + ',' +
+ 			d.getFullYear() + ':' + type + '/' + id
+ 			);
  }
  
  function rdetailViewMarc(r,id) {
***************
*** 171,177 ****
  	hideMe(G.ui.rdetail.cp_info_none); 
  }
  
  
  function _rdetailDraw(r) {
  	record = r.getResultObject();
  
--- 200,326 ----
  	hideMe(G.ui.rdetail.cp_info_none); 
  }
  
+ function OpenMarcEditWindow(pcrud, rec) {
+ 	/*
+ 	   To run in Firefox directly, must set signed.applets.codebase_principal_support
+ 	   to true in about:config
+ 	 */
+ 	netscape.security.PrivilegeManager.enablePrivilege('UniversalXPConnect');
+ 	win = window.open('/xul/server/cat/marcedit.xul'); // XXX version?
+ 	dojo.require('openils.PermaCrud');
  
+ 	win.xulG = {
+ 		"record": {"marc": rec.marc()},
+ 		"save": {
+ 			"label": opac_strings.SAVE_MFHD_LABEL,
+ 			"func": function(xmlString) {
+ 				rec.marc(xmlString);
+ 				rec.ischanged(true);
+ 				pcrud.update(rec);
+ 			}
+ 		}
+ 	};
+ }
+ 
+ function loadMarcEditor(recId) {
+ 	var pcrud = new openils.PermaCrud({"authtoken": G.user.session});
+ 	var rec = pcrud.retrieve("sre", recId);
+ 	if (rec) {
+ 		OpenMarcEditWindow(pcrud, rec);
+ 	}
+ }
+ 
+ /*
+  * This function could be written much more intelligently
+  * Limited brain power means that I'm brute-forcing it for now
+  */
+ function _holdingsDraw(h) {
+ 	holdings = h.getResultObject();
+ 	if (!holdings) { return null; }
+ 
+ 	dojo.forEach(holdings, _holdingsDrawMFHD);
+ 
+ }
+ 
+ function _holdingsDrawMFHD(holdings, entryNum) {
+ 
+         var here = findOrgUnit(getLocation());
+         if (getDepth() > 0 || getDepth === 0 ) {
+                 while (getDepth() < findOrgDepth(here))
+                 here = findOrgUnit( here.parent_ou() );
+ 		if (!orgIsMine(findOrgUnit(here), findOrgUnit(holdings.owning_lib()))) {
+ 			return null;
+ 		}
+         }
+ 
+ 	var hh = holdings.holdings();
+ 	var hch = holdings.current_holdings();
+ 	var hs = holdings.supplements();
+ 	var hcs = holdings.current_supplements();
+ 	var hi = holdings.indexes();
+ 	var hci = holdings.current_indexes();
+ 	var ho = holdings.online();
+ 	var hm = holdings.missing();
+ 	var hinc = holdings.incomplete();
+ 	var hloc = holdings.location() || 'MFHD';
+ 
+ 	if (	hh.length == 0 && hch.length == 0 && hs.length == 0 &&
+ 		hcs.length == 0 && hi.length == 0 && hci.length == 0 &&
+ 		ho.length == 0 && hm.length == 0 && hinc.length == 0
+ 	) {
+ 
+ 		if (isXUL()) {
+ 			/* 
+ 			 * If we have a record, but nothing to show for it, then the
+ 			 * record is likely empty or corrupt. This gives cataloguers a
+ 			 * chance to add holdings or correct the record
+ 			 */
+ 			hh = 'PLACEHOLDER';
+ 		} else {
+ 			return null;
+ 		}
+ 	}
+ 
+ 	dojo.place("<table style='width: 100%;'><caption id='mfhdHoldingsCaption" + entryNum + "' class='rdetail_header color_1'>" +
+ 		dojo.string.substitute(opac_strings.HOLDINGS_TABLE_CAPTION, [hloc]) +
+ 		"</caption><tbody id='rdetail_holdings_tbody_" + entryNum +
+ 		"'></tbody></table>", "rdetail_details_table", "after"
+ 	);
+ 	if (hh.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.HOLDINGS, hh); }
+ 	if (hch.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.CURRENT_HOLDINGS, hch); }
+ 	if (hs.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.SUPPLEMENTS, hs); }
+ 	if (hcs.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.CURRENT_SUPPLEMENTS, hcs); }
+ 	if (hi.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.INDEXES, hi); }
+ 	if (hci.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.CURRENT_INDEXES, hci); }
+ 	if (ho.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.ONLINE_VOLUMES, ho); }
+ 	if (hm.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.MISSING_VOLUMES, hm); }
+ 	if (hinc.length > 0) { _holdingsDrawMFHDEntry(entryNum, opac_strings.INCOMPLETE_VOLUMES, hinc); }
+ 
+ 	if (isXUL()) {
+ 		dojo.require('openils.Event');
+ 		dojo.require('openils.PermaCrud');
+ 		var mfhd_edit = new dijit.Menu({});
+ 		new dijit.MenuItem({onClick: function(){loadMarcEditor(holdings.id())}, label:opac_strings.EDIT_MFHD_RECORD}).placeAt(mfhd_edit, "first");
+ 		new dijit.MenuItem({onClick:function(){
+ 			var pcrud = new openils.PermaCrud({"authtoken": G.user.session});
+ 			var mfhd_rec = pcrud.retrieve("sre", holdings.id());
+ 			if (mfhd_rec) {
+ 				pcrud.eliminate(mfhd_rec);
+ 				alert(dojo.string.substitute(opac_strings.DELETED_MFHD_RECORD, [holdings.id()]));
+ 			}
+ 		}, label:opac_strings.DELETE_MFHD}).placeAt(mfhd_edit, "last");
+ 		// new dijit.MenuItem({onClick:function(){alert("Edit properties " + holdings.id());}, label:opac_strings.EDIT_PROPERTIES}).placeAt(mfhd_edit, "last");
+ 		var mfhd_mb = new dijit.form.DropDownButton({dropDown: mfhd_edit, label:opac_strings.EDIT_MFHD_MENU, style:"float:right"});
+ 		mfhd_mb.placeAt("mfhdHoldingsCaption" + entryNum, "last");
+ 		mfhd_edit.startup();
+ 	}
+ }
+ 
+ function _holdingsDrawMFHDEntry(entryNum, entryName, entry) {
+ 	var flatEntry = entry.toString().replace(/,/g, ', ');
+ 	dojo.place("<tr><td> </td><td nowrap='nowrap' class='rdetail_desc'>" + entryName + "</td><td class='rdetail_item'>" + flatEntry + "</td></tr>", "rdetail_holdings_tbody_" + entryNum, "last");
+ }
+ 
  function _rdetailDraw(r) {
  	record = r.getResultObject();
  
***************
*** 184,210 ****
  	G.ui.rdetail.pubdate.appendChild(text(record.pubdate()));
  	G.ui.rdetail.publisher.appendChild(text(record.publisher()));
  	$('rdetail_physical_desc').appendChild(text(record.physical_description()));
-     r = record.types_of_resource();
-     if(r) {
-         G.ui.rdetail.tor.appendChild(text(r[0]));
- 	    setResourcePic( G.ui.rdetail.tor_pic, r[0]);
-     }
  	G.ui.rdetail.abstr.appendChild(text(record.synopsis()));
  
-     try{
-         if(record.isbn()) {
-             if(ENABLE_ADDED_CONTENT_ATTRIB_LINKS) {
-                 unHideMe($('rdetail.jacket_attrib_div'));
-                 var href = $('rdetail.jacket_attrib_link').getAttribute('href') +cleanISBN(record.isbn());
-                 $('rdetail.jacket_attrib_link').setAttribute('href', href);
-             }
-         } else {
-             hideMe($("rdetail.jacket_attrib_div"));
-             hideMe($("rdetail_img_link"));
-         }
-     } catch(E) {}
  
  
  	// see if the record has any external links 
  	var links = record.online_loc();
  	for( var i = 0; links && links.length > 0 && i < links.length; i = i + 3 ) {
--- 333,361 ----
  	G.ui.rdetail.pubdate.appendChild(text(record.pubdate()));
  	G.ui.rdetail.publisher.appendChild(text(record.publisher()));
  	$('rdetail_physical_desc').appendChild(text(record.physical_description()));
+ 	r = record.types_of_resource();
+ 	if(r) {
+ 		G.ui.rdetail.tor.appendChild(text(r[0]));
+ 		setResourcePic( G.ui.rdetail.tor_pic, r[0]);
+ 	}
  	G.ui.rdetail.abstr.appendChild(text(record.synopsis()));
  
+ 	try{
+ 		if(record.isbn()) {
+ 			if(ENABLE_ADDED_CONTENT_ATTRIB_LINKS) {
+ 				unHideMe($('rdetail.jacket_attrib_div'));
+ 				var href = $('rdetail.jacket_attrib_link').getAttribute('href') +cleanISBN(record.isbn());
+ 				$('rdetail.jacket_attrib_link').setAttribute('href', href);
+ 			}
+ 			rdetailCheckForGBPreview();
  
+ 		} else {
+ 			hideMe($("rdetail.jacket_attrib_div"));
+ 			hideMe($("rdetail_img_link"));
+ 		}
+ 	} catch(E) {}
  
+ 
  	// see if the record has any external links 
  	var links = record.online_loc();
  	for( var i = 0; links && links.length > 0 && i < links.length; i = i + 3 ) {
***************
*** 251,258 ****
  	buildunAPISpan( span, 'biblio-record_entry', record.doc_id() );
  
  	$('rdetail_place_hold').setAttribute(
- 		'href','javascript:holdsDrawEditor({record:"'+record.doc_id()+'",type:"T"});');
  
  	$('rdetail_img_link').setAttribute('href', buildISBNSrc(cleanISBN(record.isbn()), 'large'));
  	G.ui.rdetail.image.setAttribute("src", buildISBNSrc(cleanISBN(record.isbn())));
  	runEvt("rdetail", "recordDrawn");
--- 402,430 ----
  	buildunAPISpan( span, 'biblio-record_entry', record.doc_id() );
  
  	$('rdetail_place_hold').setAttribute(
+ 			'href','javascript:holdsDrawEditor({record:"'+record.doc_id()+'",type:"T"});');
  
+ 	var RW = $('rdetail_exp_refworks');
+ 	if (RW && rdetailEnableRefWorks) {
+ 
+ 		var here = (findOrgUnit(getLocation())).name();
+ 		var org_name = here.replace(" ", "+");
+ 		var cgi = new CGI();
+ 
+ 		RW.setAttribute(
+ 			'href',
+ 			rdetailRefWorksHost + '/express/expressimport.asp?vendor='
+ 			+ org_name
+ 			+ '&filter=MARC+Format&database=All+MARC+Formats&encoding=65001&url=http%3A%2F%2F'
+ 			+ cgi.server_name + '/opac/extras/supercat/marctxt/record/'
+ 			+ record.doc_id()
+ 	       );
+ 
+ 		RW.setAttribute('target', 'RefWorksMain');
+ 
+ 		unHideMe($('rdetail_exp_refworks_span'));
+ 	}
+ 
  	$('rdetail_img_link').setAttribute('href', buildISBNSrc(cleanISBN(record.isbn()), 'large'));
  	G.ui.rdetail.image.setAttribute("src", buildISBNSrc(cleanISBN(record.isbn())));
  	runEvt("rdetail", "recordDrawn");
***************
*** 288,294 ****
  	unHideMe($('rdetail_more_actions'));
  
  	var req = new Request( 
- 		FETCH_CONTAINERS, G.user.session, G.user.id(), 'biblio', 'bookbag' );
  	req.callback(rdetailAddBookbags);
  	req.send();
  }
--- 460,466 ----
  	unHideMe($('rdetail_more_actions'));
  
  	var req = new Request( 
+ 			FETCH_CONTAINERS, G.user.session, G.user.id(), 'biblio', 'bookbag' );
  	req.callback(rdetailAddBookbags);
  	req.send();
  }
***************
*** 305,311 ****
  		found = true;
  		var container = containers[i];
  		insertSelectorVal( selector, index++, container.name(), 
- 			"container_" + container.id(), rdetailAddToBookbag,  1 );
  	}
  
  	nextContainerIndex = index;
--- 477,483 ----
  		found = true;
  		var container = containers[i];
  		insertSelectorVal( selector, index++, container.name(), 
+ 				"container_" + container.id(), rdetailAddToBookbag,  1 );
  	}
  
  	nextContainerIndex = index;
***************
*** 321,327 ****
  		alert($('rdetail_bb_success').innerHTML);
  		var selector = $('rdetail_more_actions_selector');
  		insertSelectorVal( selector, nextContainerIndex++, name, 
- 			"container_" + id, rdetailAddToBookbag, 1 );
  		setSelector( selector, 'start' );
  	}
  }
--- 493,499 ----
  		alert($('rdetail_bb_success').innerHTML);
  		var selector = $('rdetail_more_actions_selector');
  		insertSelectorVal( selector, nextContainerIndex++, name, 
+ 				"container_" + id, rdetailAddToBookbag, 1 );
  		setSelector( selector, 'start' );
  	}
  }
***************
*** 346,351 ****
  	hideMe($('rdetail_toc_div'));
  	hideMe($('rdetail_anotes_div'));
  	hideMe($('rdetail_excerpt_div'));
  	hideMe($('rdetail_marc_div'));
  	hideMe($('cn_browse'));
  	hideMe($('rdetail_cn_browse_div'));
--- 518,524 ----
  	hideMe($('rdetail_toc_div'));
  	hideMe($('rdetail_anotes_div'));
  	hideMe($('rdetail_excerpt_div'));
+ 	hideMe($('rdetail_preview_div'));
  	hideMe($('rdetail_marc_div'));
  	hideMe($('cn_browse'));
  	hideMe($('rdetail_cn_browse_div'));
***************
*** 356,361 ****
  	removeCSSClass($('rdetail_reviews_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_toc_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_excerpt_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_anotes_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_annotation_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_viewmarc_link'), 'rdetail_extras_selected');
--- 529,535 ----
  	removeCSSClass($('rdetail_reviews_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_toc_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_excerpt_link'), 'rdetail_extras_selected');
+ 	removeCSSClass($('rdetail_preview_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_anotes_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_annotation_link'), 'rdetail_extras_selected');
  	removeCSSClass($('rdetail_viewmarc_link'), 'rdetail_extras_selected');
***************
*** 372,389 ****
  			unHideMe($('rdetail_reviews_div')); 
  			break;
  
- 
  		case "excerpt": 
  			addCSSClass($('rdetail_excerpt_link'), 'rdetail_extras_selected');
  			unHideMe($('rdetail_excerpt_div'));
  			break;
  
  		case "anotes": 
  			addCSSClass($('rdetail_anotes_link'), 'rdetail_extras_selected');
  			unHideMe($('rdetail_anotes_div'));
  			break;
  
- 
  		case "toc": 
  			addCSSClass($('rdetail_toc_link'), 'rdetail_extras_selected');
  			unHideMe($('rdetail_toc_div'));
--- 546,567 ----
  			unHideMe($('rdetail_reviews_div')); 
  			break;
  
  		case "excerpt": 
  			addCSSClass($('rdetail_excerpt_link'), 'rdetail_extras_selected');
  			unHideMe($('rdetail_excerpt_div'));
  			break;
  
+ 		case "preview": 
+ 			addCSSClass($('rdetail_preview_link'), 'rdetail_extras_selected');
+ 			unHideMe($('rdetail_preview_div'));
+ 			rdetailDisplayGBPreview();
+ 			break;
+ 
  		case "anotes": 
  			addCSSClass($('rdetail_anotes_link'), 'rdetail_extras_selected');
  			unHideMe($('rdetail_anotes_div'));
  			break;
  
  		case "toc": 
  			addCSSClass($('rdetail_toc_link'), 'rdetail_extras_selected');
  			unHideMe($('rdetail_toc_div'));
***************
*** 412,422 ****
  function rdetailVolumeDetails(args) {
  	var row = $(args.rowid);
  	var tbody = row.parentNode;
- 	cpdBuild( tbody, row, record, args.cn, args.org, args.depth );
  	return;
  }
  
- 
  function rdetailBuildCNList() {
  
  	var select = $('cn_browse_selector');
--- 590,599 ----
  function rdetailVolumeDetails(args) {
  	var row = $(args.rowid);
  	var tbody = row.parentNode;
+ 	cpdBuild( tbody, row, record, args.cn, args.org, args.depth, args.copy_location );
  	return;
  }
  
  function rdetailBuildCNList() {
  
  	var select = $('cn_browse_selector');
***************
*** 452,458 ****
  		hideMe($('rdetail_cn_browse_select_div'));
  		return;
  	}
- 		
  	unHideMe($('rdetail_cn_browse_select_div'));
  	rdetailBuildCNList();
  	setSelector( $('cn_browse_selector'), cn );
--- 629,635 ----
  		hideMe($('rdetail_cn_browse_select_div'));
  		return;
  	}
+ 
  	unHideMe($('rdetail_cn_browse_select_div'));
  	rdetailBuildCNList();
  	setSelector( $('cn_browse_selector'), cn );
***************
*** 518,530 ****
  	}
  }
  
- 
  function rdetailBuildInfoRows() {
  	var req;
  	if( rdetailShowLocal ) 
- 		req = new Request(FETCH_COPY_COUNTS_SUMMARY, record.doc_id(), getLocation(), getDepth())
  	else
- 		req = new Request(FETCH_COPY_COUNTS_SUMMARY, record.doc_id());
  	req.callback(_rdetailBuildInfoRows);
  	req.send();
  }
--- 695,710 ----
  	}
  }
  
  function rdetailBuildInfoRows() {
  	var req;
+ 	var method = FETCH_COPY_COUNTS_SUMMARY;
+ 	if (rdetailShowCopyLocation)
+ 		method = FETCH_COPY_LOCATION_COUNTS_SUMMARY;
+ 
  	if( rdetailShowLocal ) 
+ 		req = new Request(method, record.doc_id(), getLocation(), getDepth())
  	else
+ 		req = new Request(method, record.doc_id());
  	req.callback(_rdetailBuildInfoRows);
  	req.send();
  }
***************
*** 532,545 ****
  function _rdetailRows(node) {
  
  	if( rdetailShowLocal && getLocation() != globalOrgTree.id() ) {
- 
  		var loc = findOrgUnit(getLocation());
- 
  		if( node ) {
  			if( !orgIsMine(node, loc) && !orgIsMine(loc,node) ) return;
- 
  		} else {
- 
  			for( var i = 0; i < globalOrgTree.children().length; i++ ) {
  				var org = findOrgUnit(globalOrgTree.children()[i]);
  				if( orgIsMine(org, loc) ) {
--- 712,721 ----
  function _rdetailRows(node) {
  
  	if( rdetailShowLocal && getLocation() != globalOrgTree.id() ) {
  		var loc = findOrgUnit(getLocation());
  		if( node ) {
  			if( !orgIsMine(node, loc) && !orgIsMine(loc,node) ) return;
  		} else {
  			for( var i = 0; i < globalOrgTree.children().length; i++ ) {
  				var org = findOrgUnit(globalOrgTree.children()[i]);
  				if( orgIsMine(org, loc) ) {
***************
*** 550,564 ****
  		} 
  	}
  
-     if(!node && findOrgType(globalOrgTree.ou_type()).can_have_vols())
-         node = globalOrgTree;
  
  
-     /* don't show hidden orgs */
  
  	if(node) {
  
-         if(!isXUL() && !isTrue(node.opac_visible())) return;
  
  		var row = copyRow.cloneNode(true);
  		row.id = "cp_info_" + node.id();
--- 726,740 ----
  		} 
  	}
  
+ 	if(!node && findOrgType(globalOrgTree.ou_type()).can_have_vols())
+ 		node = globalOrgTree;
  
  
+ 	/* don't show hidden orgs */
  
  	if(node) {
  
+ 		if(!isXUL() && !isTrue(node.opac_visible())) return;
  
  		var row = copyRow.cloneNode(true);
  		row.id = "cp_info_" + node.id();
***************
*** 567,577 ****
  		var cntd  = findNodeByName( row, config.names.rdetail.cn_cell );
  		var cpctd = findNodeByName( row, config.names.rdetail.cp_count_cell );
  		var actions = $n(row, 'rdetail_actions_cell');
- 	
  		var p = libtd.getElementsByTagName('a')[0];
  		libtd.insertBefore(text(node.name()), p);
  		libtd.setAttribute("style", "padding-left: " + ((findOrgDepth(node) - 1)  * 9) + "px;");
- 	
  		if(!findOrgType(node.ou_type()).can_have_vols()) {
  
  			row.removeChild(cntd);
--- 743,753 ----
  		var cntd  = findNodeByName( row, config.names.rdetail.cn_cell );
  		var cpctd = findNodeByName( row, config.names.rdetail.cp_count_cell );
  		var actions = $n(row, 'rdetail_actions_cell');
+ 
  		var p = libtd.getElementsByTagName('a')[0];
  		libtd.insertBefore(text(node.name()), p);
  		libtd.setAttribute("style", "padding-left: " + ((findOrgDepth(node) - 1)  * 9) + "px;");
+ 
  		if(!findOrgType(node.ou_type()).can_have_vols()) {
  
  			row.removeChild(cntd);
***************
*** 583,589 ****
  			libtd.colSpan = numStatuses + 3;
  			addCSSClass(row, 'copy_info_region_row');
  		} 
- 	
  		copyRowParent.appendChild(row);
  
  	} else { node = globalOrgTree; }
--- 759,765 ----
  			libtd.colSpan = numStatuses + 3;
  			addCSSClass(row, 'copy_info_region_row');
  		} 
+ 
  		copyRowParent.appendChild(row);
  
  	} else { node = globalOrgTree; }
***************
*** 604,609 ****
  var ctr = 0;
  function _rdetailBuildInfoRows(r) {
  
  	removeChildren(copyRowParent);
  
  	_rdetailRows();
--- 780,788 ----
  var ctr = 0;
  function _rdetailBuildInfoRows(r) {
  
+ 	if (rdetailShowCopyLocation)
+ 		unHideMe( $n( $('rdetail_copy_info_table'), 'rdetail_copylocation_header' ) );
+ 
  	removeChildren(copyRowParent);
  
  	_rdetailRows();
***************
*** 623,641 ****
  		if(rowNode.getAttribute("used")) {
  
  			if( rowNode.nextSibling ) {
-                 sib = rowNode.nextSibling;
-                 o ='cp_info_'+thisOrg.id()+'_';
-                 /* push the new row on as the last row for this org unit */
-                 while( sib && sib.id.match(o) ) {
-                     sib = sib.nextSibling;
-                 }
-                 if(sib)
- 				    rowNode = copyRowParent.insertBefore(copyRow.cloneNode(true), sib);
-                 else
-                     rowNode = copyRowParent.appendChild(copyRow.cloneNode(true));
-             } else {
  				rowNode = copyRowParent.appendChild(copyRow.cloneNode(true));
-             }
  
  			var n = findNodeByName( rowNode, config.names.rdetail.lib_cell );
  			n.appendChild(text(thisOrg.name()));
--- 802,820 ----
  		if(rowNode.getAttribute("used")) {
  
  			if( rowNode.nextSibling ) {
+ 				sib = rowNode.nextSibling;
+ 				o ='cp_info_'+thisOrg.id()+'_';
+ 				/* push the new row on as the last row for this org unit */
+ 				while( sib && sib.id.match(o) ) {
+ 					sib = sib.nextSibling;
+ 				}
+ 				if(sib)
+ 					rowNode = copyRowParent.insertBefore(copyRow.cloneNode(true), sib);
+ 				else
+ 					rowNode = copyRowParent.appendChild(copyRow.cloneNode(true));
+ 			} else {
  				rowNode = copyRowParent.appendChild(copyRow.cloneNode(true));
+ 			}
  
  			var n = findNodeByName( rowNode, config.names.rdetail.lib_cell );
  			n.appendChild(text(thisOrg.name()));
***************
*** 647,656 ****
  		}
  
  		var cpc_temp = rowNode.removeChild(
- 			findNodeByName(rowNode, config.names.rdetail.cp_count_cell));
  
- 		rdetailApplyStatuses(rowNode, cpc_temp, arr[2]);
  
  		var isLocal = false;
  		if( orgIsMine( findOrgUnit(getLocation()), thisOrg ) ) { 
  			found = true; 
--- 826,843 ----
  		}
  
  		var cpc_temp = rowNode.removeChild(
+ 				findNodeByName(rowNode, config.names.rdetail.cp_count_cell));
  
+ 		var statuses = arr[2];
+ 		var cl = '';
+ 		if (rdetailShowCopyLocation) {
+ 			cl = arr[2];
+ 			statuses = arr[3];
+ 		}
  
+ 
+ 		rdetailApplyStatuses(rowNode, cpc_temp, statuses);
+ 
  		var isLocal = false;
  		if( orgIsMine( findOrgUnit(getLocation()), thisOrg ) ) { 
  			found = true; 
***************
*** 665,671 ****
  		unHideMe(rowNode);
  
  		rdetailSetPath( thisOrg, isLocal );
- 		rdetailBuildBrowseInfo( rowNode, arr[1], isLocal, thisOrg );
  
  		if( i == summary.length - 1 && !defaultCN) defaultCN = arr[1];
  	}
--- 852,858 ----
  		unHideMe(rowNode);
  
  		rdetailSetPath( thisOrg, isLocal );
+ 		rdetailBuildBrowseInfo( rowNode, arr[1], isLocal, thisOrg, cl );
  
  		if( i == summary.length - 1 && !defaultCN) defaultCN = arr[1];
  	}
***************
*** 673,681 ****
  	if(!found) unHideMe(G.ui.rdetail.cp_info_none);
  }
  
  
- function rdetailBuildBrowseInfo(row, cn, local, orgNode) {
- 
  	if(local) {
  		var cache = callnumberCache[cn];
  		if( cache ) cache.count++;
--- 860,867 ----
  	if(!found) unHideMe(G.ui.rdetail.cp_info_none);
  }
  
+ function rdetailBuildBrowseInfo(row, cn, local, orgNode, cl) {
  
  	if(local) {
  		var cache = callnumberCache[cn];
  		if( cache ) cache.count++;
***************
*** 687,718 ****
  
  	$n(row, 'rdetail_callnumber_cell').appendChild(text(cn));
  
  	_debug('setting action clicks for cn ' + cn);
  
  	var dHref = 'javascript:rdetailVolumeDetails('+
- 		'{rowid : "'+row.id+'", cn :"'+cn+'", depth:"'+depth+'", org:"'+orgNode.id()+'", local: '+local+'});';
  
  	var bHref = 'javascript:rdetailShowCNBrowse("' + cn + '", '+orgNode.id()+', "'+depth+'");'; 
  
- 	$n(row, 'details').setAttribute('href', dHref);
- 	$n(row, 'browse').setAttribute('href', bHref);
  
  	if(isXUL()) {
  		unHideMe($n(row, 'hold_div'));
  		$n(row, 'hold').onclick = function() {
  			var req = new Request(FETCH_VOLUME_BY_INFO, cn, record.doc_id(), orgNode.id());
  			req.callback(
- 				function(r) {
  					var vol = r.getResultObject();
  					holdsDrawEditor({type: 'V', volumeObject : vol});
- 				}
- 			);
  			req.send();
  		};
  	}
  }
  
- 
  // sets the path to org as 'active' and displays the path if it's local 
  function rdetailSetPath(org, local) {
  	if( findOrgDepth(org) == 0 ) return;
--- 873,911 ----
  
  	$n(row, 'rdetail_callnumber_cell').appendChild(text(cn));
  
+ 	if (rdetailShowCopyLocation) {
+ 		var cl_cell = $n(row, 'rdetail_copylocation_cell');
+ 		cl_cell.appendChild(text(cl));
+ 		unHideMe(cl_cell);
+ 	}
+ 
  	_debug('setting action clicks for cn ' + cn);
  
  	var dHref = 'javascript:rdetailVolumeDetails('+
+ 			'{copy_location : "'+cl+'", rowid : "'+row.id+'", cn :"'+cn+'", depth:"'+depth+'", org:"'+orgNode.id()+'", local: '+local+'});';
  
  	var bHref = 'javascript:rdetailShowCNBrowse("' + cn + '", '+orgNode.id()+', "'+depth+'");'; 
  
+ 	unHideMe( $n(row, 'details') )
+ 		$n(row, 'details').setAttribute('href', dHref);
+ 	unHideMe( $n(row, 'browse') )
+ 		$n(row, 'browse').setAttribute('href', bHref);
  
  	if(isXUL()) {
  		unHideMe($n(row, 'hold_div'));
  		$n(row, 'hold').onclick = function() {
  			var req = new Request(FETCH_VOLUME_BY_INFO, cn, record.doc_id(), orgNode.id());
  			req.callback(
+ 					function(r) {
  					var vol = r.getResultObject();
  					holdsDrawEditor({type: 'V', volumeObject : vol});
+ 					}
+ 				    );
  			req.send();
  		};
  	}
  }
  
  // sets the path to org as 'active' and displays the path if it's local 
  function rdetailSetPath(org, local) {
  	if( findOrgDepth(org) == 0 ) return;
***************
*** 722,731 ****
  	rdetailSetPath(findOrgUnit(org.parent_ou()), local);
  }
  
- 
- 
- 
- //Append all the statuses for a give summary to the 
  //copy summary table 
  function rdetailApplyStatuses( row, template, statuses ) {
  	for( var j in _statusPositions ) {
--- 915,921 ----
  	rdetailSetPath(findOrgUnit(org.parent_ou()), local);
  }
  
+ //Append all the statuses for a given summary to the 
  //copy summary table 
  function rdetailApplyStatuses( row, template, statuses ) {
  	for( var j in _statusPositions ) {
***************
*** 734,749 ****
  		var nn = template.cloneNode(true);
  		if(val) nn.appendChild(text(val));
  		else nn.appendChild(text(0));
- 		row.appendChild(nn);	
  	}
  }
  
- 
- var _statusPositions = {};
- 
  //Add one td (creating a new column) to the copy summary
  //table for each opac_visible copy status
- 
  function rdetailBuildStatusColumns() {
  
  	rdetailGrabCopyStatuses();
--- 924,935 ----
  		var nn = template.cloneNode(true);
  		if(val) nn.appendChild(text(val));
  		else nn.appendChild(text(0));
+ 		row.appendChild(nn);
  	}
  }
  
  //Add one td (creating a new column) to the copy summary
  //table for each opac_visible copy status
  function rdetailBuildStatusColumns() {
  
  	rdetailGrabCopyStatuses();
***************
*** 759,765 ****
  			_statusPositions[i] = c;
  			var node = template.cloneNode(true);
  			var data = findNodeByName( node, config.names.rdetail.cp_status);
- 	
  			data.appendChild(text(name));
  			parent.appendChild(node);
  		}
--- 945,951 ----
  			_statusPositions[i] = c;
  			var node = template.cloneNode(true);
  			var data = findNodeByName( node, config.names.rdetail.cp_status);
+ 
  			data.appendChild(text(name));
  			parent.appendChild(node);
  		}
***************
*** 771,778 ****
  
  function rdetailGrabCopyStatuses() {
  	if(cp_statuses) return cp_statuses;
-    var req = new Request(FETCH_COPY_STATUSES);
-    req.send(true);
  	cp_statuses = req.result();
  	cp_statuses = cp_statuses.sort(_rdetailSortStatuses);
  }
--- 957,964 ----
  
  function rdetailGrabCopyStatuses() {
  	if(cp_statuses) return cp_statuses;
+ 	var req = new Request(FETCH_COPY_STATUSES);
+ 	req.send(true);
  	cp_statuses = req.result();
  	cp_statuses = cp_statuses.sort(_rdetailSortStatuses);
  }
***************
*** 781,783 ****
  	return parseInt(a.id()) - parseInt(b.id());
  }
  
--- 967,1069 ----
  	return parseInt(a.id()) - parseInt(b.id());
  }
  
+ /**
+  * Check for a Google Book preview 
+  */
+ function rdetailCheckForGBPreview() {
+ 	if (!rdetailGoogleBookPreview) return;
+ 	searchForGBPreview( cleanISBN(record.isbn()) );
+ }
+ 
+ /**
+  *
+  * @param {DOM object} query The form element containing the
+  *                     input parameters "isbns"
+  */
+ function searchForGBPreview( isbn ) {
+ 
+ 	// Delete any previous Google Booksearch JSON queries.
+ 	var GBPJsonScript = document.getElementById("GBPJsonScript");
+ 	if (GBPJsonScript) {
+ 		GBPJsonScript.parentNode.removeChild(GBPJsonScript);
+ 	}
+ 
+ 	// Add a script element with the src as the user's Google Booksearch query. 
+ 	// JSON output is specified by including the alt=json-in-script argument
+ 	// and the callback function is also specified as a URI argument.
+ 	var GBPScriptElement = document.createElement("script");
+ 
+ 	GBPScriptElement.setAttribute("id", "GBPJsonScript");
+ 	GBPScriptElement.setAttribute("src",
+ 			"http://books.google.com/books?bibkeys=" + 
+ 			isbn + "&jscmd=viewapi&callback=GBPreviewCallback");
+ 	GBPScriptElement.setAttribute("type", "text/javascript");
+ 
+ 	// make the request to Google booksearch
+ 	document.documentElement.firstChild.appendChild(GBPScriptElement);
+ }
+ 
+ /**
+  * This function is the call-back function for the JSON scripts which 
+  * executes a Google book search response.
+  *
+  * XXX I18N of text needed
+  *
+  * @param {JSON} booksInfo is the JSON object pulled from the Google books service.
+  */
+ function GBPreviewCallback(GBPBookInfo) {
+ 	var GBPreviewDiv = document.getElementById("rdetail_preview_div");
+ 	var GBPBook;
+ 
+ 	for ( i in GBPBookInfo ) {
+ 		GBPBook = GBPBookInfo[i];
+ 	}
+ 
+ 	if ( !GBPBook ) {
+ 		return;
+ 	}
+ 
+ 	if ( GBPBook.preview != "noview" ) {
+ 		if ( GBPBook.preview == 'full' ) {
+ 			setText( $('rdetail_preview_link'), $('rdetail_preview_full_text').innerHTML );
+ 			$('rdetail_preview_link_a').title = $('rdetail_preview_title').innerHTML;      
+ 		}
+ 
+ 		// Add a button below the book cover image to load the preview.
+ 		GBPBadge = document.createElement( 'img' );
+ 		GBPBadge.src = 'http://books.google.com/intl/en/googlebooks/images/gbs_preview_button1.gif';
+ 		GBPBadge.title = $('rdetail_preview_badge').innerHTML;
+ 		GBPBadge.style.border = 0;
+ 		GBPBadgelink = document.createElement( 'a' );
+ 		GBPBadgelink.href = 'javascript:rdetailShowExtra("preview");';
+ 		GBPBadgelink.appendChild( GBPBadge );
+ 		$('rdetail_image_cell').appendChild( GBPBadgelink );
+ 		$('rdetail_preview_div').style.height = 600;
+ 
+ 		/* Display the "Preview" tab in the Extras section */
+ 		unHideMe( $('rdetail_preview_link' ) );
+ 	}
+ }
+ 
+ /**
+  *  This is called when the user clicks on the 'Preview' link.  We assume
+  *  a preview is available from Google if this link was made visible.
+  *
+  * XXX I18N of Google Book Preview language attribute needed
+  */
+ function rdetailDisplayGBPreview() {
+ 	unHideMe($('rdetail_extras_loading'));
+ 	GBPreviewPane = $('rdetail_preview_div');
+ 	if ( GBPreviewPane.getAttribute('loaded') == null ||
+ 		GBPreviewPane.getAttribute('loaded') == "false" ) {
+ 		google.load("books", "0", {"callback" : rdetailGBPViewerLoadCallback, "language": "en"} );
+ 		GBPreviewPane.setAttribute('loaded', 'true');
+ 	}
+ }
+ 
+ function rdetailGBPViewerLoadCallback() {
+ 	hideMe($('rdetail_extras_loading'));
+ 	var GBPViewer = new google.books.DefaultViewer(document.getElementById('rdetail_preview_div'));
+ 	GBPViewer.load('ISBN:' + cleanISBN(record.isbn()) );
+ 
+ }
